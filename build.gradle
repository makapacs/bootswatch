// Pull the plugin from Maven Central
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.5.1'
    }
}
// Invoke the plugin
apply plugin:'base'
apply plugin: 'js'



def user="dave"
def pass="password1"
def db="for_dave"
def today = new Date().format('MMMdd_yyyy')

task backupFromShell(type:Exec) {
     doFirst{println "backing up from shell..."}
        commandLine './scripts/custom/backup-db.sh'
   }

task backup(type:Exec) {
    doFirst{println "backing up..."}
    executable "sh"
    args "-c", "mysqldump -u ${user} -p${pass} ${db}>db_backup/backup_${db}-${today}.sql"
 }

 task dropTables(dependsOn: 'backup',type:Exec){
    doFirst{println "dropping tables..."}
    commandLine './scripts/custom/drop-tables.sh', user, pass, db
 }

 task importDb(dependsOn: 'dropTables', type:Exec){
    doFirst{println "importing..."}
    executable "sh"
    args "-c", "mysql -u ${user} -p${pass} -h localhost ${db}<db_backup/${db}_import.sql"
 }

task importDbOnly(type:Exec){
    doFirst{println "importing..."}
    executable "sh"
    args "-c", "mysql -u ${user} -p${pass} -h localhost ${db}<db_backup/${db}_import.sql"
 }



 def jsSrcDir = 'sites/all/themes/bazar/js/bottom'
 def cssSrcDir = 'sites/all/themes/bazar/js/top/css'
 def pluginSrcDir = 'sites/all/modules/bazar_theme/js'
 def pluginDesDir = 'sites/all/modules/bazar_theme/js/build'
 def themeDir = 'sites/all/themes/bazar'
 def buildDir = 'sites/all/themes/bazar/js/build/bottom'
 def buildCssDir = 'sites/all/themes/bazar/css/build'
 def page = 'front'


 task cleanBuild(type: Delete) {
 	delete buildDir
 }

 task cleanCss(type: Delete) {
 	delete buildCssDir
 }

 task cleanFeatures(type: Delete) {
  	delete pluginDesDir
  }

 task init(type: Directory, dependsOn: 'cleanDelete', description: 'Creates artifact output directories') {
 	outputs.dir(buildDir)
 	doLast {
 		file(buildDir).mkdirs()
 	}
 }

javascript.source {
    dev {
        js {
            srcDir "${jsSrcDir}/default"
            include "*.js"
        }
    }
    prod {
        js {
            srcDir jsSrcDir
            include "*.js"
        }
    }
}

// Configure the built-in task
task jsDefault(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
//    source = javascript.source.dev.js.files
    source = [
                       "${themeDir}/js/jquery/jquery.commonlibraries.js",
                       "${themeDir}/js/jquery/jquery.layout.js",
                       "${themeDir}/js/responsive.js",
                       "${themeDir}/js/woocommerce.js",
                       "${themeDir}/js/jquery/jquery.touchSwipe.min.js",
                       "${themeDir}/js/jquery/jquery.mousewheel.min.js"
            ]
    dest = file("${buildDir}/default.min.js")
}

// Create new CombineJsTasks if you have multiple sets of JS files
task jsFront(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
   source = [
                          "${themeDir}/js/from-footer.js",
                          "${themeDir}/js/jquery/jquery.commonlibraries.js",
                          "${themeDir}/js/jquery/jquery.layout.js",
                          "${themeDir}/js/responsive.js",
                          "${themeDir}/js/woocommerce.js",
                          "${themeDir}/js/jquery/jquery.eislideshow.js",
                          "${themeDir}/js/jquery/jquery.carouFredSel-6.1.0-packed.js",
                          "${themeDir}/js/jquery/jquery.touchSwipe.min.js",
                          "${themeDir}/js/jquery/jquery.mousewheel.min.js"
              ]
    dest = file("${buildDir}/front.min.js")
}

task jsDisplay(dependsOn: 'jsDefault', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
   source = [
                          "${themeDir}/js/yith_magnifier.js",
                          "${themeDir}/js/frontend.js",
                          "${themeDir}/js/custom.js",
                          "${themeDir}/js/jquery/jquery.prettyPhoto.min.js",
                          "${themeDir}/js/jquery/jquery.prettyPhoto.init.min.js",
                          "${themeDir}/js/single-product.min.js",
                          "${buildDir}/default.min.js"
              ]
    dest = file("${buildDir}/display.min.js")
}

/******FEATURES TASKS********/
task jsFeatureBase(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
   source = [
                          "${pluginSrcDir}/underscore-min.js",
                          "${pluginSrcDir}/backbone-min.js",
                          "${pluginSrcDir}/handlebars.runtime.js"
              ]
    dest = file("${pluginDesDir}/base.min.js")
}

task jsContactSide( dependsOn: 'jsFeatureBase', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
   source = [
                          "${pluginDesDir}/base.min.js",
                          "${pluginSrcDir}/contact-config.js",
                          "${pluginSrcDir}/contact-0.0.2.min.js"
              ]
    dest = file("${pluginDesDir}/contact.min.js")
}

task jsContactCenter( dependsOn: 'jsFeatureBase', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
   source = [
                          "${pluginDesDir}/base.min.js",
                          "${pluginSrcDir}/inquiry-config-horizontal.js",
                          "${pluginSrcDir}/contact-0.0.2.min.js"
            ]
   dest = file("${pluginDesDir}/contact-horizontal.min.js")
}

task jsInquiryCenter(dependsOn: 'jsFeatureBase', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
   source = [
                          "${pluginDesDir}/base.min.js",
                          "${pluginSrcDir}/inquiry-config-horizontal.js",
                          "${pluginSrcDir}/contact-0.0.2.min.js"
            ]
   dest = file("${pluginDesDir}/inquiry-horizontal.min.js")
}


/*********CSS TASKS **********/
task cssDisplay( type: com.eriwen.gradle.js.tasks.CombineJsTask) << {
   source = [
                          "${themeDir}/css/yith_magnifier.css",
                          "${themeDir}/css/assets-frontend.css",
                          "${themeDir}/css/prettyPhoto.css",
              ]
    dest = file("${buildCssDir}/display.css")
}

task cssDisplayAll(dependsOn: 'cssDisplay', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
   source = [
                          "${buildCssDir}/display.css",
                          "${buildCssDir}/default.css"
              ]
    dest = file("${buildCssDir}/display-all.css")
}


task cssDefault( type: com.eriwen.gradle.js.tasks.CombineJsTask) << {
   source = [
                          "${themeDir}/css/language-selector.css",
                          "${themeDir}/css/style.css",
                          "${themeDir}/css/woocommerce/style2.css",
                          "${themeDir}/css/cache/style-28.css",
                          "${themeDir}/css/custom.css",
                          "${themeDir}/css/cache/custom-28.css",
                          "${themeDir}/css/from-header.css"
              ]
   dest = file("${buildCssDir}/default.css")
}

cssDisplayAll.dependsOn cssDefault


/**********AGRIGATE TASKS************/
task featureRelease() << {
    dependsOn jsContactSide
    dependsOn jsContactCenter
    dependsOn jsInquiryCenter
}

task featureCleanRelease(dependsOn: 'cleanFeatures') {
    dependsOn jsContactSide
    dependsOn jsContactCenter
    dependsOn jsInquiryCenter
}

task jsRelease() {
    dependsOn jsDefault
    dependsOn jsDisplay
    dependsOn jsFront
}

task jsCleanRelease(dependsOn: 'cleanBuild') {
    dependsOn jsDefault
    dependsOn jsDisplay
    dependsOn jsFront
}

task cssRelease() {
     dependsOn cssDefault
     dependsOn cssDisplayAll
}

task cssCleanRelease(dependsOn: 'cleanCss') {
    dependsOn cssDefault
    dependsOn cssDisplayAll
}

/*********Spriting*******/

def cssDir = 'sites/all/themes/bazar/css/'
def imgDir = 'sites/all/themes/bazar/img/'
def themeDirSlash = 'sites/all/themes/bazar/'
def imgDestDir = 'sites/all/themes/bazar/img-dest'
def imgDestDir2 = 'sprite/all-imgs'

 task cleanScrapedImgs(type: Delete) << {
 	delete imgDestDir
 }

task scrapImgs() << {
   def contents = new File( "${cssDir}/default.css" ).getText( 'UTF-8')

   def list = contents.findAll(/background:[\s]?url\((?!data:image)[^\)]*\)/){ match ->
      def imgUrl = match.substring(match.indexOf('(')+1, match.indexOf(')'))
     switch(true){
       case imgUrl.startsWith('../../'):
           themeDirSlash + imgUrl.substring(6)
           break
       case imgUrl.startsWith('../'):
           themeDirSlash + imgUrl.substring(3)
           break
       case imgUrl.startsWith('\'../'):
           themeDirSlash + imgUrl.substring(4, imgUrl.size()-1)
           break
       case imgUrl.startsWith('\"../'):
           themeDirSlash + imgUrl.substring(4, imgUrl.size()-1)
           break
       case imgUrl.startsWith('./'):
           cssDir + imgUrl.substring(2)
           break
       case imgUrl.startsWith('\'./'):
           cssDir + imgUrl.substring(3, imgUrl.size()-1)
           break
       case imgUrl.startsWith('"./'):
           cssDir + imgUrl.substring(3, imgUrl.size()-1)
           break
       case imgUrl.startsWith('\''):
           cssDir + imgUrl.substring(1, imgUrl.size()-1)
           break
       default:
           cssDir + imgUrl + '\n'
           break
       }
   }

    print 'Finished Scraping. Begun copying into dest dir - ' + imgDestDir + '\n'
    print '*************\n'
    FileCollection collection = files(list.unique())
    copy {
              from collection
              into imgDestDir
              rename({
                print "copying file " + it + '...\n'
               new Date().time + "_" + it
              })
        }
}

task copySpriteImgs() << {
      def pathList = [
          themeDirSlash + 'img/icons2/nav-arrow-down.png',
          themeDirSlash + 'img/icons2/socials-small/socials-small.png',
          themeDirSlash + 'img/glyphicons-halflings.png',
          themeDirSlash + 'img/templates/comments/images/author.png',
          themeDirSlash + 'img/templates/comments/images/email.png',
          themeDirSlash + 'img/templates/comments/images/comment.png',
          themeDirSlash + 'css/images/loop-zoom.png',
          themeDirSlash + 'css/images/menu-arrow.png',
          themeDirSlash + 'css/images/price-icon.png',
          themeDirSlash + 'img/assets/images/elastislider_nav.png',
          themeDirSlash + 'css/images/loop-share.png',
          themeDirSlash + 'css/images/loop-eye.png',
          themeDirSlash + 'css/images/loop-heart.png',
          themeDirSlash + 'img/assets/images/slider-arrow-testimonial.png',
          themeDirSlash + 'img/drupal-paid-themes-email.png',
          themeDirSlash + 'img/buy-drupal-7-themes-phone.png',
          themeDirSlash + 'img/best-drupal-themes-location.png',
          themeDirSlash + 'css/woocommerce/images/header-cart.png'
      ]

      print 'Begin copying into dest dir - ' + imgDestDir2 + '\n'
          print '*************\n'
          FileCollection collection = files(pathList)
          copy {
                    from collection
                    into imgDestDir2
                    rename({
                      print "copying file " + it + '...\n'
                     new Date().time + "_" + it
                    })
              }
 }


 def smushDir = 'smush/imgs/default'
 def sitesDir = 'sites/'

 task copySmushImgs() << {
      def pathList = [
      //slider
          themeDirSlash + 'img/slider/top-drupal-themes.jpg',
          themeDirSlash + 'img/slider/buy-drupal-theme.jpg',
          themeDirSlash + 'img/slider/paid-drupal-themes.jpg',
          themeDirSlash + 'img/slider/best-drupal-theme.jpg',
          themeDirSlash + 'img/slider/drupal-themes.jpg',
          themeDirSlash + 'img/slider/premium-drupal-7-themes.jpg',
      //news themes
          sitesDir + 'default/files/drupal-7-magazine-themes-462x392.jpg',
          sitesDir + 'default/files/drupal-7-news-theme-462x392.jpg',
          sitesDir + 'default/files/drupal-newspaper-themes-462x392.jpg',
      //admin
          sitesDir + 'default/files/best-drupal-hosting-theme-462x392.jpg',
          sitesDir + 'default/files/drupal-hosting-admin-theme-462x392.jpg',
          sitesDir + 'default/files/drupal-admin-theme-462x391.jpg',
      //hotel
          sitesDir + 'default/files/website-templates-for-hotels-462x392soho.jpg',
          sitesDir + 'default/files/bed-and-breakfast-website-design-462x392.jpg',
          sitesDir + 'default/files/bed-and-breakfast-themes-462x392min.jpg',
      //landing
          sitesDir + 'default/files/drupal-mobile-theme.jpg',
          sitesDir + 'default/files/responsive-one-page-drupal-theme-462x392-featured.jpg',
          sitesDir + 'default/files/one-page-drupal-theme-462x392_0.jpg',
      //commerce
          sitesDir + 'default/files/drupal-commerce-responsive-theme-462x392.jpg',
          sitesDir + 'default/files/drupal-themes-for-ecommerce-462x392.jpg',
          sitesDir + 'default/files/drupal-7-ecommerce-themes-462x392.jpg',
      //personal creative
          sitesDir + 'default/files/content-management-system-website-templates-462x392.jpg',
          sitesDir + 'default/files/premium-drupal-7-themes-462x392.jpg',
          sitesDir + 'default/files/drupal-blog-theme-462x392.jpg',
      //business
          sitesDir + 'default/files/drupal-business-themes-462x392.jpg',
          sitesDir + 'default/files/drupal-corporate-clean-462x392.jpg',
          sitesDir + 'default/files/drupal-business-theme-462x392-featured.jpg',
      //widgets
          sitesDir + 'default/files/photo-gallery-462x392-featured.jpg',
          sitesDir + 'default/files/podcast-462x392-featured.jpg',
          sitesDir + 'default/files/tablo-462x392-featured.jpg'
      ]

      print 'Begin copying into dest dir - ' + smushDir + '\n'
          print '*************\n'
          FileCollection collection = files(pathList)
          copy {
                    from collection
                    into smushDir
                    rename({
                      print "copying file " + it + '...\n'
                     //new Date().time + "_" + it
                    })
              }
 }

